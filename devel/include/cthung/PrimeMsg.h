// Generated by gencpp from file cthung/PrimeMsg.msg
// DO NOT EDIT!


#ifndef CTHUNG_MESSAGE_PRIMEMSG_H
#define CTHUNG_MESSAGE_PRIMEMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cthung
{
template <class ContainerAllocator>
struct PrimeMsg_
{
  typedef PrimeMsg_<ContainerAllocator> Type;

  PrimeMsg_()
    : Number()
    , Prime()
    , InputID()
    , OutputID()  {
    }
  PrimeMsg_(const ContainerAllocator& _alloc)
    : Number(_alloc)
    , Prime(_alloc)
    , InputID(_alloc)
    , OutputID(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _Number_type;
  _Number_type Number;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _Prime_type;
  _Prime_type Prime;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _InputID_type;
  _InputID_type InputID;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _OutputID_type;
  _OutputID_type OutputID;





  typedef boost::shared_ptr< ::cthung::PrimeMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cthung::PrimeMsg_<ContainerAllocator> const> ConstPtr;

}; // struct PrimeMsg_

typedef ::cthung::PrimeMsg_<std::allocator<void> > PrimeMsg;

typedef boost::shared_ptr< ::cthung::PrimeMsg > PrimeMsgPtr;
typedef boost::shared_ptr< ::cthung::PrimeMsg const> PrimeMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cthung::PrimeMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cthung::PrimeMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cthung::PrimeMsg_<ContainerAllocator1> & lhs, const ::cthung::PrimeMsg_<ContainerAllocator2> & rhs)
{
  return lhs.Number == rhs.Number &&
    lhs.Prime == rhs.Prime &&
    lhs.InputID == rhs.InputID &&
    lhs.OutputID == rhs.OutputID;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cthung::PrimeMsg_<ContainerAllocator1> & lhs, const ::cthung::PrimeMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cthung

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::cthung::PrimeMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cthung::PrimeMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cthung::PrimeMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cthung::PrimeMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cthung::PrimeMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cthung::PrimeMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cthung::PrimeMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ef51907d5528f928e78a87cf1db99905";
  }

  static const char* value(const ::cthung::PrimeMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xef51907d5528f928ULL;
  static const uint64_t static_value2 = 0xe78a87cf1db99905ULL;
};

template<class ContainerAllocator>
struct DataType< ::cthung::PrimeMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cthung/PrimeMsg";
  }

  static const char* value(const ::cthung::PrimeMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cthung::PrimeMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string Number\n"
"string Prime\n"
"string InputID\n"
"string OutputID\n"
"\n"
;
  }

  static const char* value(const ::cthung::PrimeMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cthung::PrimeMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Number);
      stream.next(m.Prime);
      stream.next(m.InputID);
      stream.next(m.OutputID);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PrimeMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cthung::PrimeMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cthung::PrimeMsg_<ContainerAllocator>& v)
  {
    s << indent << "Number: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.Number);
    s << indent << "Prime: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.Prime);
    s << indent << "InputID: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.InputID);
    s << indent << "OutputID: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.OutputID);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CTHUNG_MESSAGE_PRIMEMSG_H
